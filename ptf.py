#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Name:       File comparison utility
# Author:     Nathan Bird
# Website:    https://github.com/milbot/pentest-framework
# Date:       23 July 2014
# Licence:    GNU GENERAL PUBLIC LICENSE v2
#

import sys, os, datetime, difflib, subprocess
from optparse import OptionParser
from os.path import expanduser

VERSION = "1.0"

def banner():
    print
    print "\033[1;31m  ___            _____       _   _             ___                                  _   "
    print " | _ \___ _ _   |_   _|__ __| |_(_)_ _  __ _  | __| _ __ _ _ __  _____ __ _____ _ _| |__"
    print " |  _/ -_) ' \    | |/ -_|_-<  _| | ' \/ _` | | _| '_/ _` | '  \/ -_) V  V / _ \ '_| / /"
    print " |_| \___|_||_|   |_|\___/__/\__|_|_||_\__, | |_||_| \__,_|_|_|_\___|\_/\_/\___/_| |_\_\\"
    print "                                       |___/                                            \033[1;m"
    print
    print "\033[1;30m Author: Nathan Bird (milbot)"
    print " Version: "+VERSION+"\033[1;m"
    print

def main():
    parser = OptionParser(usage="Usage: %prog [options] target\n -h for help",
                          version="%prog "+VERSION)
    parser.add_option("-c", "--cleanup",
        action="store_true",
        dest="cleanup",
        default=False,
        help="If client and target already exist, remove old folder and files")
    parser.add_option("-s", "--sourceip",
        action="store",
        dest="sourceip",
        default=False,
        help="Execute enumeration from this source IP address")
    parser.add_option("-n", "--scanname",
        action="store",
        dest="scanname",
        type="string",
        help="The name of the scan, or client, that you are pen-testing. Used to store output files.")
    parser.add_option("-p", "--path",
        action="store",
        dest="path",
        type="string",
        default=expanduser("~"),
        help="The base path for store output and scan results.")

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.error("Wrong number of arguments")

    banner()

    if options.cleanup == True:
        if len(options.scanname) >= 1:
            if os.path.exists(options.path+"/"+options.scanname):
                print " Cleaning up previously scan results ("+options.path+"/"+options.scanname+")....\n"
                subprocess.Popen("rm -rf "+options.path+"/"+options.scanname, shell=True)
            else:
                print "\033[1;31m Error: Cannot cleanup. The scan name "+options.scanname+" cannot be found. Path used: "+options.path+"/"+options.scanname+"\033[1;m"

if __name__ == '__main__':
    main()

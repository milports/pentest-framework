#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Name:       File comparison utility
# Author:     Nathan Bird
# Website:    https://github.com/milbot/pentest-framework
# Date:       23 July 2014
# Licence:    GNU GENERAL PUBLIC LICENSE v2
#
# This framework assumes that the user already knows, or has a list of "live
# hosts". If you do not, please run discover.py first to determine possible
# targets for use against this framework.
#

import sys, os, datetime, difflib, subprocess, optparse, re
from os.path import expanduser

VERSION = "1.0"
USERHOME = expanduser("~")
PROG="ptf.py"
LINE=" ---------------------------------------------------------------------------------------\n"

#-----------------------------------------------------------------------------
# Compiled Regular Expressions
#-----------------------------------------------------------------------------
report_re = re.compile('Nmap scan report for (.*)')
gnmap_re = re.compile('Host: (.*)Ports:')
version_re = re.compile('# Nmap 6.25 scan initiated')
host_re = re.compile('Host: (.*) .*Ports:')
ports_re = re.compile('Ports: (.*)\sIgnored State:')
os_re = re.compile('OS: (.*)\sSeq Index:')

def run_command(cmd):
    p = subprocess.Popen(cmd.split(), stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    resp = p.stdout.read()
    warnings = p.stderr.read()
    p.stdout.close()
    p.stderr.close()

    # Return any warnings and the raw response.
    return warnings, resp

def print_warnings(warnings):
    for w in warnings.split('\n'):
        if w == '':
            continue
        print '[-] {0}'.format(w)
        if w == 'QUITTING!':
            sys.exit()

def banner():
    print
    print ""+LINE
    print "\033[1;31m  ___            _____       _   _             ___                                  _   "
    print " | _ \___ _ _   |_   _|__ __| |_(_)_ _  __ _  | __| _ __ _ _ __  _____ __ _____ _ _| |__"
    print " |  _/ -_) ' \    | |/ -_|_-<  _| | ' \/ _` | | _| '_/ _` | '  \/ -_) V  V / _ \ '_| / /"
    print " |_| \___|_||_|   |_|\___/__/\__|_|_||_\__, | |_||_| \__,_|_|_|_\___|\_/\_/\___/_| |_\_\\"
    print "                                       |___/                                            \033[1;m"
    print
    print "\033[1;30m Author: Nathan Bird (milbot)"
    print " Version: "+VERSION+"\033[1;m\n"

def printconfig(source,target,path):
    print " PTF is configured to run as follows:\n"
    print " Source IP Address: "+source
    print " Target(s):         "+target
    print " Path for output:   "+path
    print

def checkversion():
    commits_behind = subprocess.check_output("git rev-list HEAD...origin/master --count", shell=True)
    if commits_behind != 0:
        print " You are behind the master version.\n Please update to ensure you are running the latest version of this framework.\n Update by using the -u flag when running "+PROG+".\n\n E.g. ./ptf.py [options] -s source -t target\n"

def cleanup(path, scanname):
    # Run cleanup is selected by user
    print " Cleaning up previously scan results ("+path+"/"+scanname+")....\n"
    subprocess.Popen("rm -rf "+path+"/"+scanname, shell=True)

def runupdate():
    print "\nUpdating ExploitDB...."
    subprocess.Popen("apt-get install exploitdb -y", shell=True)
    print "\nUpdate complete. Please re-run the framework to use the latest version.\n"
    sys.exit()

def hostdiscover(options, FULLPATH):
    # Confirm hosts are alive
    print ""+LINE
    if options.target:
        #subprocess.Popen("nmap -sn -T4 --stats-every 10s "+options.target+" -oA "+FULLPATH+"/hosts_alive", shell=True)
        print " [*] Running host discovery against single target {0}".format(options.target)
        cmd = "nmap -sn -T4 --stats-every 10s {0} -oA {1}/hosts_alive".format(options.target, FULLPATH)
        warnings, resp = run_command(cmd)
        print_warnings(warnings)
    else:
        print " [*] Running host discovery against target input file {0}".format(options.targetfile)
        if options.exclude:
            print "   [-] Excluding host {0}".format(options.exclude)
            cmd = "nmap -sn -T4 --stats-every 10s -iL {0} --exclude {1} -oA {2}/hosts_alive".format(options.targetfile, options.exclude, FULLPATH)
            warnings, resp = run_command(cmd)
            print_warnings(warnings)
        elif options.excludefile:
            cmd = "nmap -sn -T4 --stats-every 10s -iL {0} --excludefile {1} -oA {2}/hosts_alive".format(options.targetfile, options.exclude, FULLPATH)
            warnings, resp = run_command(cmd)
            print_warnings(warnings)
        else:
            cmd = "nmap -sn -T4 --stats-every 10s -iL {0} -oA {1}/hosts_alive".format(options.targetfile, FULLPATH)
            warnings, resp = run_command(cmd)
            print_warnings(warnings)

    hosts_alive = open("{0}/hosts_alive.gnmap").format(FULLPATH)
    os.system("grep Up "+hosts_alive+" | cut -d' ' -f2 > {0}").format(FULLPATH+"/hosts_alive.txt").

    print " Please review file "+FULLPATH+"/hosts_alive to confirm the hosts that have been detected by the discovery scan\n"

    return
# End hostdiscover()

def dnsdiscover(options, FULLPATH):
    return
# End dnsdiscover()

def main():
    usage="Usage: %prog [options]"
    epilog = """
   Examples:

    ./ptf.py -t 192.168.24.100
    ./ptf.py -s 192.168.2.10 -t 192.168.24.100-254
    ./ptf.py -T targets.txt
    ./ptf.py -T targets.txt -e x.x.x.x
    ./ptf.py -u

    """

    class MyOptParser(optparse.OptionParser):
        """Override default epilog formatter, which strips newlines."""
        def format_epilog(self, formatter):
            return self.epilog

    parser = MyOptParser(usage=usage, epilog=epilog)

    parser.add_option("-c", "--cleanup",
        action="store_true",
        dest="cleanup",
        default=False,
        help="If client and target already exist, remove old folder and files")
    parser.add_option("-s", "--sourceip",
        action="store",
        dest="sourceip",
        default=False,
        help="Execute enumeration from this source IP address")
    parser.add_option("-n", "--scanname",
        action="store",
        dest="scanname",
        type="string",
        default="ptf-scan",
        help="The name of the scan, or client, that you are pen-testing. [Default: %default]")
    parser.add_option("-p", "--path",
        action="store",
        dest="path",
        type="string",
        default=USERHOME,
        help="The base path for store output and scan results. [Default: %default]")
    parser.add_option("-u", "--update",
        action="store_true",
        dest="update",
        default=False,
        help="Update PTF, ExploitDB, Metasploit and any other tools used by this framework.")
    parser.add_option("-t", "--target",
        action="store",
        dest="target",
        type="string",
        default=False,
        help="Target for discovery and enumeration scans. To scan multiple hosts use the -T option which allows for use of an input file for multiple hosts.")
    parser.add_option("-T", "--targetfile",
        action="store",
        dest="targetfile",
        type="string",
        default=False,
        help="Input file containing a list of multiple hosts to discover and enumerate.")
    parser.add_option("-e", "--exclude",
        action="store",
        dest="exclude",
        type="string",
        default=False,
        help="Exclude an IP address for all discovery and enumeration scans.")
    parser.add_option("-E", "--excludefile",
        action="store",
        dest="excludefile",
        type="string",
        default=False,
        help="Input file containing a list of multiple hosts to exclude from discovery and enumeration scans.")
    parser.add_option("-A", "--automate",
        action="append",
        dest="automated_scans",
        type="string",
        default=False,
        help="This flag allows you to automate some, or all, of the functions in this framework to replace the menu based system - e.g. automate host discovery and enumeration: -A discover -A enumerate. Use of this will prevent the menu from appearing and will only execute the automated function entered. I.e. enter all functions desired as you cannot mix and match automation and the menu system.")

    (options, args) = parser.parse_args()

    if options.update == True:
        runupdate()

    if len(args) != 0:
        parser.error("Wrong number of arguments")
        parser.print_help()

    if options.sourceip == False:
        print "\n\033[1;31m Error: You have not configured a source IP address\033[1;m\n"
        parser.print_help()
        sys.exit()

    if options.target == False and options.targetfile == False:
        print "\n\033[1;31m Error: You have not selected a target\033[1;m\n"
        parser.print_help()
        sys.exit()
    elif (options.target != False and options.targetfile == False) or (options.target == False and options.targetFile != False):
        # We're okay. User has input a target, or target input file
        if options.target == False:
            TARGET = options.targetfile
        else:
            TARGET = options.target

        FULLPATH=options.path+"/"+options.scanname
        if not os.path.exists(FULLPATH):
            os.makedirs(FULLPATH)

        banner()
        checkversion()
        print ""+LINE
        printconfig(options.sourceip, TARGET, options.path+"/"+options.scanname)
        print ""+LINE

        if options.cleanup == True:
            if len(options.scanname) >= 1:
                if os.path.exists(options.path+"/"+options.scanname):
                    cleanup(options.path, options.scanname)
                else:
                    print "\033[1;31m Error: Cannot cleanup. The scan name "+options.scanname+" cannot be found. Path used: "+options.path+"/"+options.scanname+"\033[1;m\n"
        
        # Display menu, or automate?
        if options.automated_scans == False:
            answer = True
            while answer:
                print ("""1. Host discovery
    2. DNS transfer & attacks
    3. Port & service enumeration
    4. Identify possible attack vectors

    0. Quit
        """
                )
                try:
                    answer = int(raw_input(" What would you like to do now? "))

                    if answer == 1:
                        hostdiscover(options, FULLPATH)
                    elif answer == 2:
                        dnsdiscover(options, FULLPATH)
                        print "dns"
                    elif answer == 3:
                        print "enumeration"
                    elif answer == 4:
                        print "identify possible attack vectors"
                    elif answer == 0:
                        exit()
                except ValueError:
                    print "\nNot a valid menu item"
                    continue

                if not answer in range(0,4):
                    print "\Not a valid menu item"
                    continue
        else:
            # Use automation
            if options.automated_scans == "discover":
                hostdiscover(options, FULLPATH)

if __name__ == '__main__':
    main()
